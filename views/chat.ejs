<div class="app-container">
  <div class="sidebar">
    <h2>Users</h2>
    <ul id="userList" class="user-list"></ul>
    <button id="logoutBtn">Logout</button>
  </div>

  <div class="chat-container">
    <% if (!selectedUser) { %>
      <div class="no-chat">Select a user to chat</div>
      <% } else { %>
        <div class="chat-header">
          <%= selectedUser.username %>
        </div>
        <div id="chatMessages" class="chat-messages"></div>
        <div class="chat-input-container">
          <input id="chatInput" class="chat-input" placeholder="Type a message" autocomplete="off" />
          <button id="sendBtn" class="chat-send-btn">Send</button>
        </div>
        <% } %>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const currentUsername = localStorage.getItem('username');
  const token = localStorage.getItem('token');
  const selectedUserId = '<%= selectedUser?._id?.toString() || "" %>';

  document.getElementById('logoutBtn').onclick = () => {
    localStorage.clear();
    location.href = '/login';
  };

  document.addEventListener('DOMContentLoaded', fetchUsers);

  async function fetchUsers() {
    const res = await fetch('/chat/users', {
      headers: { Authorization: `Bearer ${token}` }
    });
    const users = await res.json();
    const userList = document.getElementById('userList');
    userList.innerHTML = '';

    users
      .filter(u => u.username !== currentUsername)
      .forEach(user => {
        const li = document.createElement('li');
        li.className = 'user-item' + (user._id === selectedUserId ? ' selected' : '');

        const btn = document.createElement('button');
        btn.className = 'user-link';
        btn.dataset.userid = user._id;
        btn.textContent = user.username;

        if (user.unreadCount > 0) {
          const badge = document.createElement('span');
          badge.className = 'unread-count';
          badge.textContent = user.unreadCount;
          btn.appendChild(badge);
        }

        btn.onclick = () =>
          location.href = user._id === selectedUserId ? '/chat' : `/chat?user=${user._id}`;

        li.appendChild(btn);
        userList.appendChild(li);
      });
  }

  <% if (selectedUser) { %>
    const socket = io({ auth: { token }, withCredentials: true });
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');

    socket.on('connect', () => socket.emit('joinRoom', '<%= selectedUser._id %>'));
    socket.on('connect_error', err => console.error('Socket error:', err.message));

    sendBtn.onclick = sendMessage;
    chatInput.onkeydown = e => (e.key === 'Enter' ? (e.preventDefault(), sendMessage()) : null);

    function formatTime(date) {
      const d = new Date(date);
      const h = d.getHours();
      const m = d.getMinutes().toString().padStart(2, '0');
      const ampm = h >= 12 ? 'PM' : 'AM';
      return `${(h % 12 || 12)}:${m} ${ampm}`;
    }

    function addMessage(text, fromMe) {
      const div = document.createElement('div');
      div.classList.add('chat-message', fromMe ? 'from-me' : 'from-them');
      div.innerText = text;
      chatMessages.appendChild(div);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function loadChatHistory() {
      try {
        const res = await fetch(`/chat/messages/<%= selectedUser._id %>`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const messages = await res.json();
        messages.forEach(msg => addMessage(msg.text, msg.fromSelf, msg.createdAt));
      } catch (err) {
        console.error('Chat history error:', err);
      }
    }

    function sendMessage() {
      const text = chatInput.value.trim();
      if (!text) return;
      socket.emit('chatMessage', { toUserId: '<%= selectedUser._id %>', text });
      addMessage(text, true);
      chatInput.value = '';
    }

    socket.on('message', ({ from, text, createdAt }) => {
      if (from === selectedUserId) {
        addMessage(text, false, createdAt);
      } else {
        const btn = document.querySelector(`.user-link[data-userid="${from}"]`);
        if (btn) {
          let badge = btn.querySelector('.unread-count');
          if (!badge) {
            badge = document.createElement('span');
            badge.className = 'unread-count';
            badge.textContent = '1';
            btn.appendChild(badge);
          } else {
            badge.textContent = +badge.textContent + 1;
          }
        }
      }
    });

    loadChatHistory();
  <% } %>
</script>