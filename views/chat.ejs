<div class="app-container">
  <div class="sidebar">
    <h2>Users</h2>
    <ul class="user-list">
      <% users.forEach(user=> { %>
        <li class="user-item <%= user._id.toString() === selectedUser?._id.toString() ? 'selected' : '' %>">
          <button class="user-link" data-userid="<%= user._id %>">
            <%= user.username %>
              <% if (user.unreadCount> 0) { %>
                <span class="unread-count">
                  <%= user.unreadCount %>
                </span>
                <% } %>
          </button>
        </li>
        <% }) %>
    </ul>
    <button id="logoutBtn" type="button">Logout</button>
  </div>

  <div class="chat-container">
    <% if (!selectedUser) { %>
      <div class="no-chat">Select a user to chat</div>
      <% } else { %>
        <div class="chat-header">
          <%= selectedUser.username %>
        </div>
        <div id="chatMessages" class="chat-messages"></div>
        <div class="chat-input-container">
          <input id="chatInput" class="chat-input" placeholder="Type a message" autocomplete="off" />
          <button id="sendBtn" class="chat-send-btn">Send</button>
        </div>
        <% } %>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  document.getElementById('logoutBtn').addEventListener('click', () => {
    localStorage.removeItem('token');
    localStorage.removeItem('username');
    localStorage.removeItem('email');
    window.location.href = '/auth/login';
  });

  const currentUsername = localStorage.getItem('username');
  document.querySelectorAll('.user-item').forEach(li => {
    const btn = li.querySelector('.user-link');
    if (btn.textContent.trim() === currentUsername) {
      li.remove();
    }
  });

  const currentUserId = '<%= selectedUser?._id?.toString() || "" %>';

  document.querySelectorAll('.user-link').forEach(button => {
    button.addEventListener('click', async () => {
      const clickedUserId = button.getAttribute('data-userid');
      if (clickedUserId === currentUserId) {
        window.location.href = '/chat';
      } else {
        // console.log("Hello")
        // await loadChatHistory();
        await fetch('/messages/mark-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('token')}`
          },
          body: JSON.stringify({ fromUserId: clickedUserId }),
        });
        window.location.href = `/chat?user=${clickedUserId}`;
      }
    });
  });

  <% if (selectedUser) { %>
    const token = localStorage.getItem('token');
    const socket = io({ auth: { token }, withCredentials: true });

    socket.on('connect', () => {
      socket.emit('joinRoom', '<%= selectedUser._id %>');
    });

    socket.on('connect_error', (err) => {
      console.error('Socket connection error:', err.message);
    });

    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');

    function addMessage(text, fromMe) {
      const div = document.createElement('div');
      div.classList.add('chat-message', fromMe ? 'from-me' : 'from-them');
      div.innerText = text;
      chatMessages.appendChild(div);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function loadChatHistory() {
      try {
        const res = await fetch(`/messages/<%= selectedUser._id %>`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        const messages = await res.json();
        messages.forEach(msg => {
          addMessage(msg.text, msg.fromSelf);
        });
      } catch (err) {
        console.error('Failed to load chat history:', err);
      }
    }

    function sendMessage() {
      const text = chatInput.value.trim();
      if (!text) return;
      socket.emit('chatMessage', { toUserId: '<%= selectedUser._id.toString() %>', text });
      addMessage(text, true);
      chatInput.value = '';
    }

    sendBtn.addEventListener('click', () => {
      sendMessage();
      chatInput.focus();
    });

    chatInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        e.preventDefault();
        sendMessage();
      }
    });

    socket.on('message', ({ from, text }) => {
      if (from === '<%= selectedUser._id %>') {
        addMessage(text, false);
      } else {
        const btn = document.querySelector(`.user-link[data-userid="${from}"]`);
        if (btn) {
          let badge = btn.querySelector('.unread-count');
          if (!badge) {
            badge = document.createElement('span');
            badge.classList.add('unread-count');
            badge.textContent = '1';
            btn.appendChild(badge);
          } else {
            badge.textContent = parseInt(badge.textContent) + 1;
          }
        }
      }
    });
  <% } %>
</script>